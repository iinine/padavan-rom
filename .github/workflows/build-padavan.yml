#修改TNAME: K2P-5.0 中的K2P-5.0为你需要编译的型号，注意名称要与configs/templates/目录下的名字相同
name: Padavan

on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      production:
        # Friendly description to be shown in the UI instead of 'name'
        description: 设置编译的固件型号,空格分隔.
        # Default value if no value is explicitly provided
        default: "K2P PSG1218"
        # Input has to be provided for the workflow to run
        required: false
      release:
        # Friendly description to be shown in the UI instead of 'name'
        #无法换行
        #description: "是否需要发布到Release?\n(不发布也可以到Artifacts下载)"
        #缩短长度还是解决不了手机页面的显示超出
        #description: "是否需要发布到Release?"
        description: "是否需要发布到Release? (不发布也可以到Artifacts下载)"
        # Default value if no value is explicitly provided
        default: 'yes'
        # Input has to be provided for the workflow to run
        required: false

jobs:
  padavan:
    runs-on: ubuntu-20.04

    steps:   
    - name: 生成版本号
      run: |
        whoami
        id
        echo 接收到的输入参数:
        echo "${{ github.event.inputs.production }}"
        echo "${{ github.event.inputs.release }}"
        echo 
        echo 当前目录:$(pwd)
        # 版本号,用日期
        VERSION=$(TZ='Asia/Shanghai' date +%Y.%m.%d-%H%M)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        # $GITHUB_ENV变量必须要在下一个流程才生效
        echo "DIR=/opt/rt-n56u" >> $GITHUB_ENV
        val1="${{ github.event.inputs.production }}"
        val2=$(echo $val1 | sed 's/ /-/')
        echo "NAME=$VERSION+${val2}" >> $GITHUB_ENV
        #让版本号符合版本规范 1.0.202110252117+K2P-PSG1218
        # 2021.10.28-2133+K2P-PSG1218
        echo "TAG=v$VERSION+${val2}" >> $GITHUB_ENV
        ip addr
    - name: 创建目录
      run: |
        echo ${{ env.NAME }}
        echo ${{ env.TAG }}
        sudo mkdir -m 777 -p ${{ env.DIR }}
        sudo mkdir -m 777 -p /opt/images/
        
        echo 开始编译时间 >> /opt/images/readme.txt
        TZ='Asia/Shanghai'  date  '+%Y-%m-%d %H:%M:%S' >> /opt/images/readme.txt
        
    - name: 准备编译环境
      if: true
      run: | 
        sudo apt install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd \
        fakeroot kmod cpio git python3-docutils gettext automake autopoint \
        texinfo build-essential help2man pkg-config zlib1g-dev libgmp3-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget libc-dev-bin  > /dev/null
        
    - name: 下载源码
      run: | 
        git clone --depth=1 https://github.com/chongshengB/rt-n56u.git /opt/rt-n56u
        cd /opt/rt-n56u/toolchain-mipsel
        sh dl_toolchain.sh
        mkdir -p /opt/images/
        
    - name: 路由器页面下加入编译时间和个人信息标签
      if: true
      run: | 
        cd ${{ env.DIR }}/trunk
        valtime=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M')
        val2="\\1 footer_code +='编译日期 $valtime by <a href=\"https://github.com/iinine/Padavan-rom\" target=\"blank\">iinine</a><br>';"
        
    - name: 开始编译
      if: true
      env:
        TNAME: "${{ github.event.inputs.production }}"
      run: |
        cd /opt/rt-n56u/trunk
        if [ ! -f configs/templates/$TNAME.config ] ; then
        echo "configs/templates/$TNAME.config not found "
        exit 1
        fi
        cp -f configs/templates/$TNAME.config .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
        ################################################################################################
        #因不同型号配置功能不一样，所以先把配置项删除，如果你自己要添加其他的，也要写上删除这一条，切记！！！
        ################################################################################################
        #sed -i '/CONFIG_FIRMWARE_INCLUDE_MENTOHUST/d' .config #删除配置项MENTOHUST
        #sed -i '/CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT/d' .config #删除配置项SCUTCLIENT
        #sed -i '/CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS/d' .config #删除配置项SS plus+
        #sed -i '/CONFIG_FIRMWARE_INCLUDE_SSSERVER/d' .config #删除配置项SS server
        #sed -i '/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER/d' .config #删除配置项DNSFORWARDER
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ADBYBY/d' .config #删除配置项adbyby plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPC/d' .config #删除配置项adbyby plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPS/d' .config #删除配置项adbyby plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TUNSAFE/d' .config #删除配置项adbyby plus+
        #sed -i '/CONFIG_FIRMWARE_INCLUDE_ALIDDNS/d' .config #删除配置项阿里DDNS
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SMARTDNS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SRELAY/d' .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
        ######################################################################
        #以下选项是定义你需要的功能（y=集成,n=忽略）只启动了adb广告过滤  比较好用的
        ######################################################################
        echo "CONFIG_FIRMWARE_INCLUDE_MENTOHUST=n" >> .config #MENTOHUST
        echo "CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT=n" >> .config #SCUTCLIENT
        echo "CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=n" >> .config #SS plus+
        echo "CONFIG_FIRMWARE_INCLUDE_SSOBFS=n" >> .config # simple-obfs混淆插件
        echo "CONFIG_FIRMWARE_INCLUDE_SSSERVER=n" >> .config #SS server
        echo "CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER=n" >> .config #DNSFORWARDER
        echo "CONFIG_FIRMWARE_INCLUDE_ADBYBY=y" >> .config #adbyby plus+ 广告过滤
        echo "CONFIG_FIRMWARE_INCLUDE_FRPC=n" >> .config #内网穿透FRPC
        echo "CONFIG_FIRMWARE_INCLUDE_FRPS=n" >> .config #内网穿透FRPS
        echo "CONFIG_FIRMWARE_INCLUDE_TUNSAFE=n" >> .config #TUNSAFE
        echo "CONFIG_FIRMWARE_INCLUDE_ALIDDNS=n" >> .config #阿里DDNS
        echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNS=n" >> .config #smartdns dns加速网络
        echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNSBIN=n" >> .config #smartdns二进制文件 
        echo "CONFIG_FIRMWARE_INCLUDE_V2RAY=n" >> .config #集成v2ray执行文件（3.8M左右)，如果不集成，会从网上下载下来执行，不影响正常使用
        echo "CONFIG_FIRMWARE_INCLUDE_TROJAN=n" >> .config #集成trojan执行文件(1.1M左右)，如果不集成，会从网上下载下来执行，不影响正常使用
        echo "CONFIG_FIRMWARE_INCLUDE_KOOLPROXY=n" >> .config #KP广告过滤
        echo "CONFIG_FIRMWARE_INCLUDE_CADDY=n" >> .config #在线文件管理服务
        echo "CONFIG_FIRMWARE_INCLUDE_CADDYBIN=n" >> .config #集成caddu执行文件，此文件有13M,请注意固件大小。如果不集成，会从网上下载下来执行，不影响正常使用
        echo "CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME=n" >> .config      广告过滤  k2带不动
        echo "CONFIG_FIRMWARE_INCLUDE_SRELAY=n" >> .config #可以不集成
        echo "CONFIG_FIRMWARE_INCLUDE_WYY=n" >> .config #网易云解锁
        echo "CONFIG_FIRMWARE_INCLUDE_WYYBIN=n" >> .config #网易云解锁GO版本执行文件（4M多）注意固件超大小,不集成会自动下载
        echo "CONFIG_FIRMWARE_INCLUDE_ZEROTIER=n" >> .config #zerotier ~1.3M
        #########################################################################################
        #自定义添加其它功能请参考源码configs/templates/目录下的config文件。按照上面的格式添加即可
        #格式如下：
        #sed -i '/自定义项/d' .config
        #echo "自定义项=y" >> .config
        #########################################################################################
        sudo ./clear_tree
        sudo ./build_firmware_modify $TNAME 0
        sudo mv -f images/*.trx /opt/images/
        
    - name: 收集信息
      if: true
      run: |
        cd /opt/images
        #记录一个版本号
        echo 完成编译时间 >> /opt/images/readme.txt
        TZ='Asia/Shanghai'  date  '+%Y-%m-%d %H:%M:%S' >> /opt/images/readme.txt
        
        echo  >> /opt/images/readme.txt
        echo 编译版本 >> /opt/images/readme.txt
        
        pushd ${{ env.DIR }}
        git ls-remote --get-url origin >> /opt/images/readme.txt
        git log -1 >> /opt/images/readme.txt
        popd
        
        echo  >> /opt/images/readme.txt
        echo md5校验值 >> /opt/images/readme.txt
        cd /opt/images
        #为固件文件名加上日期
        for i in *.trx
        do
          #echo org $i
          mv -v "$i" "${i%.*}-${{ env.VERSION }}.trx"
        done
        #测试
        md5sum *.trx >> /opt/images/readme.txt || echo
        ls -l
        
        
    - name : 上传编译的固件Artifacts
      uses: actions/upload-artifact@v2
      if: true
      with:
        name: ${{ env.NAME }}
        path: /opt/images
        
    - name: 发布到Release
      if: ${{ github.event.inputs.release == 'yes' }}
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ env.NAME }}
        tag_name: ${{ env.TAG }}
        body_path: /opt/images/readme.txt
        draft: false
        prerelease: false
        files: /opt/images/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
